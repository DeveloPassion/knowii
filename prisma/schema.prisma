generator client {
  provider        = "prisma-client-js"
  /// Reference: https://www.prisma.io/docs/guides/database/multi-schema
  previewFeatures = ["multiSchema"]
}

/// Reference: https://www.prisma.io/docs/guides/database/multi-schema
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["public"]
}

model Clients {
  id                   String               @id @db.Uuid @default(uuid())
  name                 String               @unique
  given_name           String               @default("")
  family_name          String               @default("")
  email                String               @default("")
  user_role            KnowiiUserRole       @default(USER)
  image_url            String               @default("")
  phone                String               @default("")
  user_id              String               @default(dbgenerated("auth.uid()")) @db.Uuid
  created_at           DateTime             @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at           DateTime             @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  adminOf              Communities[]        @relation("community_admins")
  memberOf             Communities[]        @relation("community_members")
  ownerOf              Communities[]        @relation("community_owners")

  @@schema("public")
  @@map("clients")
}

model Customers {
  user_id              String               @id @db.Uuid
  stripe_customer_id   String

  @@schema("public")
  @@map("customers")
}

model Prices {
  id                   String               @id @db.Uuid @default(uuid())
  product_id           String?              @db.Uuid
  active               Boolean?
  description          String?
  unit_amount          BigInt?
  currency             String?
  type                 PricingType?
  interval             PricingPlanInterval?
  interval_count       Int?
  trial_period_days    Int?
  metadata             Json?
  products             Products?            @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriptions        Subscriptions[]

  @@schema("public")
  @@map("prices")
}

model Products {
  id                   String               @id @db.Uuid @default(uuid())
  active               Boolean?
  name                 String?
  description          String?
  image                String?
  metadata             Json?
  prices               Prices[]
  subscriptions        Subscriptions[]

  @@schema("public")
  @@map("products")
}

model Subscriptions {
  id                   String               @id @db.Uuid @default(uuid())
  user_id              String               @db.Uuid
  status               SubscriptionStatus?
  metadata             Json?
  product_id           String?              @db.Uuid
  price_id             String?              @db.Uuid
  quantity             Int?
  cancel_at_period_end Boolean?
  created_at           DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_start DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_end   DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  ended_at             DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  cancel_at            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  canceled_at          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_start          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_end            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  prices               Prices?              @relation(fields: [price_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products             Products?            @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
  @@map("subscriptions")
}

enum PricingPlanInterval {
  day
  week
  month
  year

  @@schema("public")
  @@map("pricing_plan_interval")
}

enum PricingType {
  one_time
  recurring

  @@schema("public")
  @@map("pricing_type")
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  paused
  unpaid

  @@schema("public")
  @@map("subscription_status")
}

model Communities {
  id                   String               @id @db.Uuid @default(uuid())
  name                 String               @unique
  description          String               @default("") @map("description")
  created_at           DateTime             @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at           DateTime             @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  admins               Clients[]            @relation("community_admins")
  members              Clients[]            @relation("community_members")
  owners               Clients[]            @relation("community_owners")

  @@index([name], map: "idx_community_name")
  @@map("communities")
  @@schema("public")
}

enum KnowiiUserRole {
  USER
  ADMIN

  @@map("user_role")
  @@schema("public")
}

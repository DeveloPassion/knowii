name: Release

# Manual workflow
on: workflow_dispatch

permissions:
  actions: read
  contents: write
  issues: write
  pull-requests: write

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: 'npm'
      - run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - run: npm ci --legacy-peer-deps
      # Create and switch to a new branch before the release
      # This is necessary because the main branch is protected
      - run: |
          git checkout -b release-${GITHUB_SHA}
          git push --set-upstream origin release-${GITHUB_SHA}
      - uses: nrwl/nx-set-shas@v4
      - run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create and merge a PR for the release
      # This is a workaround for the main branch protection
      # Reference: https://github.com/krlmlr/pr-bots/blob/main/.github/workflows/write-file-branch-merge.yaml
      - run: |
          gh pr create --title "Release ${GITHUB_SHA}" --body "This is a PR release" --base main --head release-${GITHUB_SHA}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          pr_number=$(gh pr list --state open --limit 1 --json number --jq '.[0].number')
          gh pr merge $pr_number --merge
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Clean up the temporary release branch
      - run: |
          git checkout main
          git branch -D release-${GITHUB_SHA}
          git push origin --delete release-${GITHUB_SHA}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

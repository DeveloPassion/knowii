name: Release

concurrency: release

# Manual workflow with optional release type input
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  actions: read
  contents: write
  issues: write
  pull-requests: write

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: 'npm'
      - run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - run: npm ci --legacy-peer-deps
      # Create and switch to a new branch before the release
      # This is necessary because the main branch is protected
      - run: |
          git switch --create release-${GITHUB_SHA}
          git push --set-upstream origin release-${GITHUB_SHA}
      - uses: nrwl/nx-set-shas@v4
      - name: Run release
        run: |
          if [ -n "${{ github.event.inputs.release_type }}" ]; then
            NX_NO_CLOUD=true && npm run release ${{ github.event.inputs.release_type }}
          else
            NX_NO_CLOUD=true && npm run release
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create and merge a PR for the release
      # This is a workaround for the main branch protection
      # Reference: https://github.com/krlmlr/pr-bots/blob/main/.github/workflows/write-file-branch-merge.yaml
      - run: |
          gh pr create --title "Release ${GITHUB_SHA}" --body "This is a Release PR" --base main --head release-${GITHUB_SHA}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          pr_number=$(gh pr list --state open --limit 1 --json number --jq '.[0].number')
          gh pr merge $pr_number --rebase
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Clean up the temporary release branch
      - run: |
          git checkout main
          git branch -D release-${GITHUB_SHA}
          git push origin --delete release-${GITHUB_SHA}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
